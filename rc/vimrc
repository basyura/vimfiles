""""""""""""""""""""""""""""""""""
"         core settings          "
""""""""""""""""""""""""""""""""""

if expand("%") == ".git/COMMIT_EDITMSG" || &filetype == 'gitcommit'
  finish
endif

filetype plugin indent on
syntax on

if filereadable($HOME . '/.vimrc_local_before')
  source ~/.vimrc_local_before
endif

call plug#begin('~/.vim/plugged')
"{{{
  Plug 'vim-denops/denops.vim'
  Plug 'basyura/dsky.vim'

  " theme
  Plug 'vim-scripts/newspaper.vim'
  Plug 'vim-scripts/Wombat'

  " base
  Plug 'Shougo/vimproc'
  Plug 'mattn/webapi-vim'
  Plug 'tyru/vim-altercmd'
  Plug 'vim-jp/vimdoc-ja'

  " mastodon
  Plug 'mattn/vim-mastodon'


  " unite
  Plug 'basyura/unite-converter-file-directory'
  Plug 'basyura/unite-filters'
  Plug 'basyura/unite-matchers'
  Plug 'basyura/unite-outline'
  Plug 'basyura/unite.vim'
  Plug 'rhysd/unite-go-import.vim'
  Plug 'soh335/unite-qflist'
  Plug 'supermomonga/unite-sudden-death'
  Plug 'thinca/vim-unite-history'
  Plug 'ujihisa/unite-colorscheme'
  if has("win32")
    Plug 'sgur/unite-everything'
  else
    Plug 'basyura/unite-mdfind'
  endif

  " util
  Plug 'Shougo/neomru.vim'
  Plug 'Shougo/neosnippet.vim'
  Plug 'Shougo/vimfiler'
  Plug 'basyura/util.vim'
  Plug 'haya14busa/vim-asterisk'
  Plug 'rhysd/clever-f.vim'
  Plug 'thinca/vim-fontzoom'
  Plug 'thinca/vim-quickrun'
  Plug 'thinca/vim-singleton'
  Plug 'tpope/vim-commentary'
  Plug 'tyru/open-browser.vim'
  Plug 'tyru/restart.vim', { 'commit': 'f416e484' }
  Plug 'vim-scripts/copypath.vim'

  " lsp
  Plug 'basyura/vim-lsp-popup-diagnostics'
  Plug 'mattn/vim-lsp-settings'
  Plug 'prabirshrestha/vim-lsp'
  Plug 'prabirshrestha/async.vim'

  " complete
  Plug 'prabirshrestha/asyncomplete-buffer.vim'
  Plug 'prabirshrestha/asyncomplete-lsp.vim'
  Plug 'prabirshrestha/asyncomplete-neosnippet.vim'
  Plug 'prabirshrestha/asyncomplete.vim'
  Plug 'basyura/asyncomplete-file.vim'

  " Plug 'basyura/neocomplete.vim'

  " dev
  Plug 'mattn/vim-goimports'
  Plug 'prettier/vim-prettier'

  " js
  Plug 'pangloss/vim-javascript'
  Plug 'mxw/vim-jsx'

"}}}
call plug#end()

set background=dark
if has("gui_running")
  if get(g:, 'my_colorscheme', '') == ''
    let g:my_colorscheme = "newspaper"
  end
else
  let g:my_colorscheme = "default"
endif
execute 'colorscheme ' . g:my_colorscheme

" helptags ~/.vim/plugged/vimdoc-ja/doc

call altercmd#load()

if &termencoding == ''
  let &termencoding="utf-8"
endif

let mapleader = "m"

"map {{{
""""""""""""""""""""""""""""""""""
"             map                "
""""""""""""""""""""""""""""""""""

nnoremap <silent> <Space>.  :<C-u>silent! edit   $MYVIMRC<Enter>
nnoremap <Space>s.  :<C-u>source $MYVIMRC<Enter>
nnoremap <Space>g.  :<C-u>edit   $MYGVIMRC<Enter>
nnoremap <Space>gs. :<C-u>source $MYGVIMRC<Enter>
nnoremap <Space>v.  :<C-u>edit   ~/.vimshrc<Enter>
nnoremap <Space>ss  :<C-u>Source %<Enter>

imap <C-v> <C-R>+
cmap <C-v> <C-R>+

nnoremap <Esc> <Esc>:noh<CR>
nnoremap I i<Space><Left>

nnoremap qq q
nnoremap q <Nop>

nnoremap <silent> U :<C-u>redo<CR>
nnoremap vs :vsplit<CR>
nnoremap <Space>nw :setlocal nowrap<CR>
" nnoremap ls :LspSettingsStatus<CR>
nnoremap <C-@>s :LspSettingsStatus<CR>

"ウインドウのフォーカス移動
noremap wh <C-w>h
noremap wl <C-w>l
noremap wj <C-w>j
noremap wk <C-w>k
noremap wp <C-w>p
nnoremap <Space>v :vsplit<CR>
noremap <silent> gl :macaction selectNextWindow:<CR>
noremap <script> gh :macaction selectPreviousWindow:<CR>

nnoremap <Space>c <C-w><C-c>

nnoremap en :enew<CR>

inoremap <C-d> <Del>
cmap <C-d> <Del>

nnoremap 0 ^
nnoremap ^ 0

" C-kを押すと行末まで削除
inoremap <C-k> <C-o>D
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
inoremap <C-u> <C-g>u<C-o>u
inoremap <C-@> <C-o>:redo<CR>
inoremap <C-w> <C-g>u<C-w>
inoremap <C-p> <C-o>

nnoremap gc `[v`]

"全て選択
nmap  <C-a><C-a> ggvG$
" gvim で q → bd をしてる用
nmap <C-q><C-q><C-q> ZQ

cmap <C-e> <End>
cmap <C-a> <HOME>
cmap <C-f> <Right>
cmap <C-b> <Left>
imap <C-e> <End>
imap <C-a> <ESC>0i
imap <C-f> <Right>
imap <C-b> <Left>

nnoremap <C-e> <End>
nnoremap <C-a> <HOME>
nnoremap <C-f> <Right>
nnoremap <C-b> <Left>
" カウントアップ
nnoremap <C-c> <C-a>

nnoremap cc cw

nnoremap <M-k> <C-y>
nnoremap <M-j> <C-e>
nnoremap <Leader>w :WriteToFile<CR>
nnoremap <silent> <Leader>o :on<CR>

nnoremap <silent> <C-x><C-n> :TabNew<CR>
nnoremap <silent> <C-x><C-l> :tabnext<CR>
nnoremap <silent> <C-x><C-h> :tabprevious<CR>
nnoremap <silent> <C-f> :tabnext<CR>
nnoremap <silent> <C-b> :tabprevious<CR>
nnoremap <silent><Leader>r :redraw!<CR> 
nnoremap <silent>on 999<C-w>+
nnoremap cn :cn<CR>
nnoremap cp :cp<CR>
nnoremap <C-]> g<C-]>
nnoremap <silent> j  gj
nnoremap <silent> gj j
nnoremap <silent> k  gk
nnoremap <silent> gk k
nnoremap <Space>p :call <SID>clever_p()<CR>

nnoremap <nowait> yw yw


nnoremap <silent>w :call <SID>clever_move("w")<CR>
nnoremap <silent>b :call <SID>clever_move("b")<CR>


nnoremap $  g$
nnoremap g$ $
nnoremap L y$
nnoremap Y y$
vnoremap Y "*y
vnoremap v $h

nnoremap <silent> <C-@><C-@> :Restart!<CR>
" Change current directory.
nnoremap <silent> <Space>cd :<C-u>CD<CR>


nnoremap ) :tabmove +1<CR>
nnoremap ( :tabmove -1<CR>

nmap <Leader>c vv<Plug>Commentary

inoremap <C-s> <ESC>:w<CR>:echo "saved"<CR>
inoremap <silent> <C-o> <ESC>o
inoremap <C-j> <ESC>
inoremap jj <ESC>
noremap <silent> <C-j> <ESC>:noh<CR>
" cygwin だとなぜか insert モードに入る
if has('gui_running')
  noremap <silent> <ESC> <ESC>:noh<CR>
endif
inoremap kk <ESC>O
inoremap [[ []<Left>
inoremap {{ {  }<Left><Left>
inoremap (( (  )<Left><Left>
inoremap << <><Left>
inoremap `` ``<Left>
inoremap ``` ```
inoremap <C-q> []<Left>

vnoremap <C-e> <End><Left>
vmap <Leader>c <Plug>Commentary
vmap <C-b> :Batch<CR>

cnoremap <C-p>  <Up>
cnoremap <Up>   <C-p>
cnoremap <C-n>  <Down>
cnoremap <Down> <C-n>
cnoremap <C-j> <C-u><ESC>

tmap <Esc> <C-l>N
" default is <C-W>N / my termwindkey is <C-l>

"}}}

""""""""""""""""""""""""""""""""""
"        load settings           "
""""""""""""""""""""""""""""""""""

if filereadable($HOME . '/.vimrc_local')
  source ~/.vimrc_local
endif

execute "source " . expand('~/.vim/rc/plugin/vimproc.rc.vim')

for rc in glob('~/.vim/rc/plugin/*', 1, 1)
  execute "source " . expand(rc)
endfor

if filereadable($HOME . '/.vimrc_local_after')
  source ~/.vimrc_local_after
endif

if filereadable(expand('~/.vim/rc/highlight/' . g:my_colorscheme. '.vim'))
  execute 'source ~/.vim/rc/highlight/' . g:my_colorscheme . '.vim'
endif

""""""""""""""""""""""""""""""""""
"          highlight             "
""""""""""""""""""""""""""""""""""

hi Pmenu    guifg=#FFFDD6  guibg=black   ctermfg=0  ctermbg=8
hi PmenuSel guifg=#F0FF93  guibg=#000000 ctermfg=15 ctermbg=8

""""""""""""""""""""""""""""""""""
"          functions             "
""""""""""""""""""""""""""""""""""
function! s:clever_p()
  let text = getreg("\"")
  if text =~ "\n$"
    normal! p
  else
    call append(".", text)
    normal j$
  endif
endfunction

let s:no_clever_pattern = '\.\|(\|)\|!\|:\|]\|[\|<\|>\|"\|\$\|/\|-\|,' ."\\|'"

function! s:clever_move(word)
  execute "normal! " . a:word
  let chr =getline('.')[col('.') -1]
  if  chr =~ s:no_clever_pattern || chr == ''
    call s:clever_move(a:word)
  endif
endfunction


function! s:close_loclists()
  let wins = getwininfo()
  let current = win_getid()

  for w in wins
    if w.loclist == 1
      call win_gotoid(w.winid)
      close
    endif
  endfor

  call win_gotoid(current)
endfunction

nnoremap <silent> <Space>c :call <SID>close_loclists()<CR>

" vim: foldmethod=marker
