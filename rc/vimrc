" tab_mode or buffer mode
let g:tab_mode = 0

""""""""""""""""""""""""""""""""""
"         core settings          "
""""""""""""""""""""""""""""""""""

if expand("%") == ".git/COMMIT_EDITMSG" || &filetype == 'gitcommit'
  finish
endif

filetype plugin indent on
syntax on

" メッセージ抑止
let $CYGWIN = 'nodosfilewarning'

set runtimepath^=~/.vim/gitplugins/*
set runtimepath+=~/.vim/plugins/*
set runtimepath+=~/.vim
set runtimepath+=~/.vim/after

colorscheme wombat

set completeopt-=preview

helptags ~/.vim/gitplugins/vimdoc-ja/doc

call altercmd#load()

if &termencoding == ''
  let &termencoding="utf-8"
endif

let mapleader = "m"

""""""""""""""""""""""""""""""""""
"           settings             "
""""""""""""""""""""""""""""""""""

" singleton.vim
if has('clientserver') && !has('mac')
  call singleton#enable()
  let g:singleton#opener = "drop"
endif

" for unite
function! Unite_substitute(profile, pat, subst, ...)
  let priority = get(a:000, 0, 0)
  call unite#custom#profile(a:profile, 'substitute_patterns', {
        \   'pattern': a:pat,
        \   'subst': a:subst,
        \   'priority': priority,
        \ })
endfunction

if filereadable($HOME . '/.vimrc_local')
  source ~/.vimrc_local
endif

"map {{{
""""""""""""""""""""""""""""""""""
"             map                "
""""""""""""""""""""""""""""""""""

nmap p <Plug>(yankround-p)
imap <C-v> <C-R>+
cmap <C-v> <C-R>+

nnoremap I i<Space><Left>

nnoremap qq q
nnoremap q <Nop>

nnoremap <silent> U :<C-u>redo<CR>
"map bn    :bnext<CR>
"ウインドウのフォーカス移動
noremap wh <C-w>h
noremap wl <C-w>l
noremap wj <C-w>j
noremap wk <C-w>k
noremap <silent> gl :macaction selectNextWindow:<CR>
noremap <script> gh :macaction selectPreviousWindow:<CR>

if g:tab_mode
  nnoremap <silent> <Space>.   :<C-u>silent! tab drop $MYVIMRC<CR>
else
  nnoremap <silent> <Space>.   :<C-u>silent! edit   $MYVIMRC<Enter>
endif

nnoremap <Space>s.  :<C-u>source $MYVIMRC<Enter>
nnoremap <Space>g.  :<C-u>edit   $MYGVIMRC<Enter>
nnoremap <Space>gs. :<C-u>source $MYGVIMRC<Enter>
nnoremap <Space>v.  :<C-u>edit   ~/.vimshrc<Enter>
nnoremap <Space>ss  :<C-u>Source %<Enter>

nnoremap <C-x><C-n> :setlocal nu!<CR>

inoremap <C-d> <Del>
cmap <C-d> <Del>

nnoremap 0 ^
nnoremap ^ 0

" C-kを押すと行末まで削除
inoremap <C-k> <C-o>D
inoremap <silent> <ESC> <ESC>:set iminsert=0<CR>
inoremap <C-u> <C-g>u<C-o>u
inoremap <C-@> <C-o>:redo<CR>
inoremap <C-w> <C-g>u<C-w>
inoremap <C-p> <C-o>

nnoremap gc `[v`]

"全て選択
nmap  <C-a><C-a> ggvG$
" gvim で q → bd をしてる用
nmap <C-q><C-q><C-q> ZQ

cmap <C-e> <End>
cmap <C-a> <HOME>
cmap <C-f> <Right>
cmap <C-b> <Left>
imap <C-e> <End>
imap <C-a> <ESC>^i
imap <C-f> <Right>
imap <C-b> <Left>

nnoremap <C-e> <End>
nnoremap <C-a> <HOME>
nnoremap <C-f> <Right>
nnoremap <C-b> <Left>
" カウントアップ
nnoremap <C-c> <C-a>

nnoremap cc cw

nmap <Leader><Leader>b <Plug>(openbrowser-open)

"置換
nnoremap <Leader><Leader>r :1,$ s///gc<left><left><left><left>

nnoremap <M-k> <C-y>
nnoremap <M-j> <C-e>
nnoremap <Leader>s :Scratch<CR>
nnoremap <Leader>w :WriteToFile<CR>
nnoremap <silent> <Leader>o :on<CR>
nnoremap <Space>d :<C-u>pwd<CR>

nnoremap <silent> <C-x><C-x> :TabNew<CR>
nnoremap <silent> <C-x><C-l> :tabnext<CR>
nnoremap <silent> <C-x><C-h> :tabprevious<CR>
nnoremap <silent> <C-f> :tabnext<CR>
nnoremap <silent> <C-b> :tabprevious<CR>
nnoremap <C-w>; <C-w>+
nnoremap w; <C-w>+
nnoremap w- <C-w>-
nnoremap wm 100<C-w>+
nnoremap <silent><Leader>r :redraw!<CR> 
nnoremap <silent>on 999<C-w>+
nnoremap cn :cn<CR>
nnoremap cp :cp<CR>
nnoremap wp <C-w>p
nnoremap <C-]> g<C-]>
nnoremap <C-w> <Home>dw
nnoremap <silent> j  gj
nnoremap <silent> gj j
nnoremap <silent> k  gk
nnoremap <silent> gk k
"nnoremap 0 ^
"nnoremap 00 0
"nnoremap ^ 0
nnoremap $  g$
nnoremap g$ $

nnoremap L y$

cnoremap <C-p>  <Up>
cnoremap <Up>   <C-p>
cnoremap <C-n>  <Down>
cnoremap <Down> <C-n>

" for unite-rails
nnoremap <C-x><C-m> :Unite rails/model<CR>
nnoremap <C-x><C-c> :Unite rails/controller<CR>
nnoremap <C-x><C-v> :Unite rails/view<CR>
nnoremap <C-x><C-d> :Unite rails/db<CR>
nnoremap <C-x><C-f> :Unite rails/config<CR>
nnoremap <C-x> :Unite rails/


nnoremap Y y$
vnoremap Y "*y

nnoremap <silent> <C-@><C-@> :Restart!<CR>

nnoremap ) :tabmove +1<CR>
nnoremap ( :tabmove -1<CR>

nmap <Leader>c <Plug>NERDCommenterToggle
" ターミナルだとなぜか起動時にインサートモードになるので

inoremap <C-s> <ESC>:w<CR>:echo "saved"<CR>
inoremap <silent> <C-o> <ESC>o
inoremap <C-j> <ESC>
inoremap jj <ESC>
noremap <silent> <C-j> <ESC>:noh<CR>
" cygwin だとなぜか insert モードに入る
if has('gui_running')
  noremap <silent> <ESC> <ESC>:noh<CR>
endif
inoremap kk <ESC>O
inoremap [[ []<Left>
inoremap <C-q> []<Left>

vnoremap <C-e> <End><Left>
vmap <Leader>c <Plug>NERDCommenterToggle
vmap <C-b> :Batch<CR>

cnoremap <C-j> <C-u><ESC>

vnoremap ch :s/\t/\|_=./g<CR>
vnoremap cb :s/\t/\|/g<CR>

" getchar() で挿入する文字を入力
nmap <leader>J <Plug>(jplus-getchar)
vmap <leader>J <Plug>(jplus-getchar)

" 文字の左右にスペースを付属させる
nmap <Space>J <Plug>(jplus-getchar-with-space)
vmap + <Plug>(jplus-getchar-with-space)

"}}}

execute "source " . expand('~/.vim/rc/plugin/vimproc.rc.vim')

for rc in glob('~/.vim/rc/plugin/*', 1, 1)
  execute "source " . expand(rc)
endfor


""""""""""""""""""""""""""""""""""
"             misc               "
""""""""""""""""""""""""""""""""""
let g:scratchBackupFile=$HOME . "/.scratch.txt"
" ubuntu の時だけ
if !has('mac') && !has('win32') && !has('win32unix')
  inoremap <silent> <esc> <esc>:call ForceImeOff()<cr>
  inoremap <silent> <C-[> <esc>:call ForceImeOff()<cr>
  inoremap <silent> <C-c> <esc>:call ForceImeOff()<cr>
  function! ForceImeOff()
    let imeoff = system('xvkbd -text "\[Control]\[Shift]\[space]" > /dev/null 2>&1')
  endfunction
endif

" Change current directory.
nnoremap <silent> <Space>cd :<C-u>CD<CR>

" Load settings for each location.
augroup vimrc-local
  autocmd!
  autocmd BufEnter * call s:vimrc_local(expand('<afile>:p:h'))
augroup END

command! FindTags call s:vimrc_local(expand('<afile>:p:h'))
function! s:vimrc_local(loc)
  let &l:tags=findfile('.tags' , '.;')
endfunction

if has('mac')
  let g:restart_vim_progname = "MacVim"
end

if filereadable($HOME . '/.vimrc_local_after')
  source ~/.vimrc_local_after
endif

inoremap <silent><C-x><C-s> <Esc>:call <SID>toggle_status()<CR>a
nnoremap <silent><C-x><C-s> :call <SID>toggle_status()<CR>

function! s:toggle_status()
  if &laststatus == 2 
    let &laststatus = 0
  else
    let &laststatus = 2
    if winheight('%') < 3
      execute '3 wincmd _'
    endif
  endif
endfunction



if filereadable($HOME . '/.vimrc_local_after')
  source ~/.vimrc_local_after
endif


" vim: foldmethod=marker
