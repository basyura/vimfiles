*refe.txt* ReFe Browser  For Vim version 7.0.

Author: Yuichi Tateno aka secondlife<hotchpotch@NOSPAM@gmail.com>		|refe-plugin-author|

|refe-introduction|		イントロダクション
|refe-install|		インストール方法
|refe-usage|		簡単な使い方
|refe-commands|		コマンド
|refe-keyboard|		キーボード操作
|refe-settings| 	設定
|refe-about|			refe.vim について
|refe-license|			ライセンスについて

==============================================================================
イントロダクション *refe-introduction* *refe*

Ruby のドキュメントを読むとき、青木さん作の Ruby
リファレンスマニュアル引きのコマンドラインツール、
ReFe ( http://i.loveruby.net/ja/prog/refe.html )を使うと大変便利です。
しかし vim を使っているとどうしても vim 上からさくさく ReFe
で検索したくなります。なるのです。

そんなとき、この refe.vim を使うと、まるで vim の help を読み進めるように、
ReFe を vim 上から利用することができます。

実際に refe.vim でリファレンスを引いている動画は
http://rails2u.com/projects/refe.vim/screencast.html
をご覧下さい。

==============================================================================
インストール方法  *refe-install*

インストール方法は、http://rails2u.com/projects/refe.vim/refe.vba を
ダウンロードして、 >
  vim -c 'so %' refe.vba
コマンドで終わりです。

また事前に ReFe をインストールしておく必要があります。
RubyGems を使っているなら >
  gem install refe
でインストールは完了です。

==============================================================================
簡単な使い方 *refe-usage*

それではどのようにして利用するのでしょうか。基本は :Refe コマンドで
リファレンスを引きます。
たとえば、Array#each のリファレンスを読みたければ、 >
 :Refe a#each
でもいいですし、 >
 :Refe each
で表示されるメソッドリストの中から選択することも可能です。

また、すばらしいプラグイン、lookupfile.vim
( http://www.vim.org/scripts/script.php?script_id=1581 ) を利用すると、
Vim7の新機能を利用した、使いやすいインクリメンタル検索を行うことが可能です。

ReFe によるリファレンス表示バッファでは、o キーを押すことで、
カーソル下の単語から よしなにリファレンスを引いてくれます。
たとえば、CGI::Cookie という箇所の上で o を押すと CGI::Cookie に、
sub! の上で o を押すと sub!  の検索候補がリストとして表示され、
すぐに目的のリファレンスを読むことができるでしょう。
B で元読んでいたリファレンスに戻る(Back)することもできますし、- キーで、今開いているクラス、
Array#each を開いているなら Array のリファレンスを読むことができます。

その他、クラス、モジュールリファレンスの
>
  ---- Singleton methods ----
 [] new
 ---- Instance methods ----
 & * + - << <=> == [] []= assoc at clear clone collect!
>
のような特異メソッド、インスタンスメソッドの表示箇所で o を押すと、
そのクラス/モジュールのメソッド名のリファレンスを引いてくれます。

==============================================================================
コマンド *refe-commands*

refe.vim で使うコマンドは現在 :Refe のみです。

                                       *refe-:Refe*
:Refe {word}
                      {word} が refe の検索結果に一件のみマッチする場合、
                      refe バッファで内容を表示します。
                      複数件マッチする場合、LookupFile を利用できる環境ならば
                      LookupFile でのインクリメンタルサーチが、ない環境
                      もしくは |g:RefeUseLookupFile| が 0 ならば独自の候補
                      バッファを表示します。
                      また、{word} が文字列 <cword> であった場合、呼び出した
                      カーソル下の文字列で検索します。

==============================================================================
キーボード操作 *refe-keyboard*

refe のバッファでは独自のキーバインドで操作が可能です。

キー       挙動~
q, <C-C>   バッファを閉じる
B          一つ戻る
o, K       カーソル下の単語で検索する
-          見ているメソッドのクラス/モジュールを開く。
s, <C-K>   検索

==============================================================================
設定 *refe-global-settings*

いくつかのグローバル変数を変更することで、挙動を変えることができます。

                                      *g:RefeUseLookupFile*  >
     let g:RefeUseLookupFile=0
lookupfile.vim がインストールしてある場合、検索で LookupFile を使うかどうかの
設定です。デフォルトは 1 (使う)です。

                                      *g:RefeMinPatLength*  >
     let g:RefeMinPatLength=3
LookupFile を使う場合、何文字からインクリメンタルな検索を行うかの設定です。
デフォルトでは 3 です。

                                      *g:RefeCommand*  >
     let g:RefeCommand='/home/example/bin/refe'
refe コマンドの名前です。デフォルトは 'refe' です。

==============================================================================
Tips *refe-tips*

ruby なファイルを編集している場合、カーソル下の単語を refe.vim で検索したい、
や :Refe と打つのが面倒ですぐ検索したい、と思ったりします。そんなときは、
~/.vim/ftplugin/ruby.vim などに
>
  nnoremap <buffer> <silent> K :Refe <cword><CR>
  nnoremap <buffer> <silent> <C-K> :Refe<CR>
>
を追加すると、K でカーソル下の単語を、<C-K>ですぐに :Refe でインクリメンタルな
検索などが行え、便利です。

==============================================================================
ToDo *refe-todo*

- ときたま buffer が削除されない場合のバグ修正
- refe -e/-C モードの対応

==============================================================================
refe.vim について *refe-about*

このプラグインは Yuichi Tateno aka secondlife によって作られました。


==============================================================================
ライセンス *refe-license*

このプラグインは MIT ライセンスとします。

==============================================================================
vim:ts=4:ft=help:tw=78:
