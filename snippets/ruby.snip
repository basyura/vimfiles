snippet     a
abbr        #{param}
options     word
    #{${1}}


snippet     encoding
abbr        -*- coding: utf-8 -*-
prev_word   '^'
    -*- coding: utf-8 -*-

snippet     test
abbr        Test::Unit::TestCase
    Test::Unit::TestCase

snippet     class
abbr        class Hoge end
    class ${1}
        ${2}
    end

snippet method_missing
abbr    method_missing
    method_missing(method , *args)

snippet     re
alias req
abbr        require 'hoge'
    require '${1}'


snippet     d
abbr        def
    def ${1}
        ${2}
    end

snippet     k
abbr        ( )
    (${1})

snippet ww
abbr    %w[ ]
    %w[${1}]

snippet here
  <<-EOF
  ${1}
  EOF

snippet each
options word
    each do |${1}|
      ${2}
    end

snippet sig
    sig = class << self ; self end
    
snippet each_pair
    each_pair do |k , v|
        ${1}
    end

snippet module_eval
    module_eval do |mod|
        ${1}
    end

snippet instance_eval
    instance_eval do |obj|
        ${1}
    end

snippet     optparse
abbr        OptionParser
prev_word   '^'
    require 'optparse'
    def pcon
      return @pcon if @pcon
      @pcon = Hash.new
      opts = OptionParser.new
      opts.on("-f file"){|v| @pcon[:f] = v}
      opts.on("--diff file"){|v| @pcon[:diff] = v}
      opts.on("--cp"){|v| @pcon[:copy] = v}
      opts.parse!(ARGV)
      @pcon
    end

snippet     add_column
abbr        add_column
prev_word   '^'
    add_column ${1:table} , ${2:column} , ${3:type}

snippet     describe
  describe "${1}" do
    ${2}
  end

snippet     i
    it { should ${1} }

snippet     def
    def ${1}
      ${2}
    end


snippet     open
options     word
    open(${1:path}, &:read)

snippet     each_line
options     word
    each_line do |line|
      ${1}
    end

snippet     inib
options     word
abbr        alloc.initWithNibName
    initWithNibName(${1:nil}, bundle: ${2:nil})

snippet     iroot
options     word
abbr        alloc.initWithRootViewController
    initWithRootViewController(${1:controller})

snippet     iframe
options     word
    initWithFrame(${1:CGRectZero})

snippet     viewDidLoad
  def viewDidLoad
    super

    ${1}
  end
