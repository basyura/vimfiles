
snippet     s
prev_word   '^'
    "${0}"

snippet array
    []${1:type}{${2}}

snippet     for
abbr        for () {}
    for ${1:i}, ${2:s} := range ${3:v} {
        ${4}
    }


snippet     struct
prev_word   '^'
    type ${1:name} struct {
        ${2}
    }

snippet     func
prev_word   '^'
    func ${1:name}(${2}) ${3} {
        ${4}
    }

snippet     main
prev_word   '^'
    func main() {
        ${1}
    }

snippet print
options     word
abbr        fmt.Println
    fmt.Println(${0})

snippet ok
options word
abbr err == nil
  err == nil 

snippet ng
options word
abbr err != nil
  err != nil 


snippet cmd
options word
	out, err := exec.Command(${1}).Output()
	if err != nil {
    ${2}
	}

snippet df
options word
  "2006/01/02/15:04:05.000"


snippet getFilePaths
  func getFilePaths(baseDir string) []string {
    files, err := ioutil.ReadDir(baseDir)
   
    if err != nil {
      fmt.Println("read error :", baseDir)
      os.Exit(1)
    }
   
    var paths []string
    for _, file := range files {
      path := filepath.Join(baseDir, file.Name())
      paths = append(paths, path)
    }
   
    return paths
  }

snippet open
    fp, err := os.Open(${1:filename})
    if err != nil {
      return err
    }
    defer fp.Close()
 
    scanner := bufio.NewScanner(fp)
    for scanner.Scan() {
        text := scanner.Text()
    }
 
    if err = scanner.Err(); err != nil {
        // エラー処理
    }

snippet excel
    excel, err := xlsx.OpenFile(${1:filename})
    if err != nil {
      ${2}
    }

snippet d
options word
  2006/01/02 15:04:05.000


snippet sort
	sort.Slice(${1:values}, func(i, j int) bool {
		return $1[i].${2:value}< $1[j].$2
	})

snippet append
  ${1:list} = append($1, ${2:value})


snippet map
abbr map[Type]Type
	map[${1:string}]${0:int}

snippet meth
abbr func (self Type) Method(...) [error] { ... }
regexp /^meth/
	func (${1:self} ${2:Type}) ${3:Do}(${4}) ${5:error }{
		${0}
	}

snippet defr
	defer func() {
    ${0}
	}()

snippet err
  if err != nil {
    return ${1}err
  }

snippet ef
options     word
  fmt.Errorf("${1}\n%w", err)

snippet readsjis
	fp, err := os.Open(path)
	if err != nil {
		return nil, err
	}
	defer fp.Close()

	reader := transform.NewReader(fp, japanese.ShiftJIS.NewDecoder())
	bytes, err := io.ReadAll(reader)
